#!/usr/bin/env bash

CONF=

PRJ=
ID=
BASE=
CMD=

while getopts "T:p:i:s" opt; do
    case "${opt}" in
        T)
            BASE="$OPTARG"
            ;;
        p)
            PRJ="$OPTARG"
            ;;
        i)
            ID="$OPTARG"
            ;;
        *)
            exit 1
    esac
done

shift $((OPTIND-1))
CMD="$1"

function usage()
{
    cat << EOF
Usage: tman struct COMMAND
    Create pre-defined files, directories, etc

    COMMAND list:
      del       delete pre-defined files
      help      show this help message and exit
      make      make pre-defined files
      show      show list of default files
EOF
}

function _find_config()
{
    local confdir=("$HOME/.tman/pgns/struct.conf" "$HOME/.config/tman/pgns/struct.conf")

    for conf in "${confdir[@]}"; do
        if [ -f "$conf" ]; then
            CONF="$conf"
            return 0
        fi
    done
    return 1
}

function struct_create()
{
    for dir in "${STRUCT_DIRS[@]}"; do
        mkdir -p "$BASE/$PRJ/$ID/$dir"
    done
    for file in "${STRUCT_FILES[@]}"; do
        touch "$BASE/$PRJ/$ID/$file"
    done
    return 0;
}

function struct_delete()
{
    for dir in "${STRUCT_DIRS[@]}"; do
        rm -rf "$BASE/$PRJ/$ID/$dir"
    done
    for file in "${STRUCT_FILES[@]}"; do
        rm -rf "$BASE/$PRJ/$ID/$file"
    done
    return 0;
}

function struct_show()
{
    printf "Dirs  : "
    for dir in "${STRUCT_DIRS[@]}"; do
        printf "%s " "$dir"
    done

    printf "\nFiles : "
    for file in "${STRUCT_FILES[@]}"; do
        printf "%s " "$file"
    done
}

function struct_rename()
{
    echo "struct_rename"
    return 0;
}


_find_config && source "$CONF" || exit 0

if [ -z "$CMD" -o "$CMD" = "make" ]; then
    struct_create
elif [ "$CMD" = "delete" ]; then
    struct_delete
elif [ "$CMD" = "rename" ]; then
    struct_rename
elif [ "$CMD" = "show" ]; then
    struct_show
elif [ "$CMD" = "help" ]; then
    usage
else
    echo "no such command '$CMD'" && exit 1
fi
