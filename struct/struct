#!/bin/bash

PGNAME="struct"

COMMAND=
TASKDIR=
PRJNAME=
TASKNAME=


function usage()
{
    cat << EOF
Usage: tman struct COMMAND
    Create pre-defined files, directories, etc

    COMMAND list:
      del       delete pre-defined files
      help      show this help message and exit
      make      make pre-defined files
      show      show list of default files
EOF
}

function _find_config()
{
    local confdir=("$HOME/.tman/pgns/struct.conf" "$HOME/.config/tman/pgns/struct.conf")

    for conf in "${confdir[@]}"; do
        if [ -f "$conf" ]; then
            CONF="$conf"
            return 0
        fi
    done
    return 1
}

function struct_make()
{
    for dir in "${STRUCT_DIRS[@]}"; do
        mkdir -p "$BASE/$PRJ/$ID/$dir"
    done
    for file in "${STRUCT_FILES[@]}"; do
        touch "$BASE/$PRJ/$ID/$file"
    done
    return 0;
}

function struct_delete()
{
    for dir in "${STRUCT_DIRS[@]}"; do
        rm -rf "$BASE/$PRJ/$ID/$dir"
    done
    for file in "${STRUCT_FILES[@]}"; do
        rm -rf "$BASE/$PRJ/$ID/$file"
    done
    return 0;
}

function struct_show()
{
    printf "Dirs  : "
    for dir in "${STRUCT_DIRS[@]}"; do
        printf "%s " "$dir"
    done

    printf "\nFiles : "
    for file in "${STRUCT_FILES[@]}"; do
        printf "%s " "$file"
    echo
    done
}

function struct_rename()
{
    echo "struct_rename"
    return 0;
}


OPTS=$(getopt -o i:p:T:h --long prj:,taskid:,taskdir:help -n "$PGNAME" -- "$@")
if [ $? -ne 0 ]; then
    #echo "error parsing options" >&2
    exit 1
fi

## Reset the positional parameters to the parsed options
eval set -- "$OPTS"

while true; do
    case "$1" in
        -i)
            TASKNAME="$2"
            shift 2
            ;;
        -p)
            PRJNAME="$2"
            shift 2
            ;;
        -T)
            TASKDIR="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "$PGNAME: invalid option '$1'" >&2
            exit 1
    esac
done

COMMAND="$1"

if [ -z "$COMMAND" ]; then
    echo "$PGNAME: no command passed"
    exit 1
fi



_find_config && source "$CONF" || exit 0

if [ -z "$COMMAND" -o "$COMMAND" = "make" ]; then
    struct_make
elif [ "$COMMAND" = "delete" ]; then
    struct_delete
elif [ "$COMMAND" = "rename" ]; then
    struct_rename
elif [ "$COMMAND" = "show" ]; then
    struct_show
elif [ "$COMMAND" = "help" ]; then
    usage
else
    echo "no such command '$COMMAND'" && exit 1
fi
